#This is the configuration file for MMT Probe

#unique-id given to the probe
probe-id-number = 111

#in case for PCAP the input mode can be online or offline, however for DPDK its only online
input-mode   = "online"
#path where the license key exists
license_file_path = "license.key"

#indicates the file name where the log messages will be written to
logfile = "log.data"    #default is "log.data" in the running folder

#indicates where the traffic reports will be dumped (CSV file)
output 
{ 
    enable = 1
    data-file   = "dataoutput.csv"      #report name for traffic data
    location = "/opt/mmt/probe/" #location where reports are written
    retain-files  = 20   # retains the last x sampled files, set to 0 to retain all files (retain-files > thread_nb +1)
    sampled_report = 1 # set to 1 if you need sampled report (every x seconds) or 0 if you need a single report
}

# indicates redis output
redis-output
{
    enabled = 0 #set to zero to disable publishing to redis, non zero to enable publishing to redis 
    hostname = "127.0.0.1" #hostname of redis server 172.17.0.2
    port = 6379 # port number of redis server
}

# indicates REST output
rest-output
{
    enabled = 1 #set to zero to disable publishing to redis, non zero to enable publishing to redis 
    hostname = "http://172.30.1.5:8080/doctor/api/report" #hostname of redis server 172.17.0.2
}

# indicates ndn security
ndn_security_config
{
    enabled = 1 #set to zero to disable the feature, 1 to enable
    output = 2 #0 for csv file, 1 for redis, 2 for rest
    path_output = "./data_nfd.csv" # path to the report 
    localhost_filter = 1 #1 to enable, use to filter interest with prefix /localhost and /localhop
    redis_hostname = "127.0.0.1" #hostname of redis server in local/tenant for ndn_security
    redis_port = 6379 # port number of redis server
    rest_hostname = "http://127.0.0.1:8080/api/ndn_security" #hostname of REST server in local/tenant for ndn_security
    time_period = 5 # time period to send info to redis server in local/tenant
    path_nfd_log = "/var/log/nfd_log" # path to the nfd_log file /var/log/nfd_log    ./nfd_log_R1   ./test_nfd_log
}

ifa_detector_config 
{
    enable = 0 # enable/ disable ifa_detector
    dimension_window = 50 # dimension window
    prescribed_PFA = 0.001 # Pre scribed PFA
    size_attack = 2 # size of attack
    degre = 6 # degre model used
    time_period = 1 # time period to get the pair value i_t, d_t
    output_data = 1 # ouput_data = 1-> enable write down the value of i_t, d_t, output_data = 0 -> disable
    time_break = 120 # Time period to break the output file
}

#input source for PCAP online mode (interface name) and for offline mode (pcap name), however for DPDK its interface port number
input-source = "eth0"

# All the sections below are optional and can be enable or disable according to the requirements, sections available are 
#thread configuration (default 1 thread),security, behaviour, ftp reconstruction,redis output,radius output, data-output, 
#event based reporting,micro-flows reporting, condition based reporting, stats-period (default 5 seconds), file-output-period (default 5 seconds)

# indicates the threads configuration options

thread-nb    = 1    # this is the number of threads MMT will use for processing packets. Must be positive and power of 2.
thread-queue = 3000 # this is the maximum number of packets queued for processing that a single thread accepts (only for PCAP). 
                    # 0 means MMT decides how many packets to queue (default =1000)
                    # If a packet is dispatched for a thread with a full queue the packet will be dropped and reported in MMT statistics
thread-data  = 0    # this is the maximum amount of data queued for processing that a single thread accepts (only for PCAP. 
                    # 0 means unlimited (will always be limited by the system memory)
                    # If a packet is dispatched for a thread with full data the packet will be dropped and reported in MMT statistics
                    
snap-len = 0        # 0 means default value 65535, apparently what tcpdump uses for -s 0 (only for PCAP)                    

#indicates mmt_security input and output (only with PCAP)
security
{       
    enable  = 0        #Set to 1 to perform security analysis, 0 to disable it
    #Indicates the format of the output result. 
    id = 10
    results-dir  = "reports/security/"                  #folder where detected breaches will be reported
    properties-file   = "security_rules/properties_doctor.xml"  #file containing security properties and rules
}
#smp-security
security2
{
    enable      = 0     # Set to 1 to perform security analysis, 0 to disable it
    thread-nb   = 1     # Number of security threads per one probe thread, e.g., 
                        # if we have 16 probe threads => we have totally 16*2 security threads
                        # Set to zero to use probe thread
                        
    id          = 10    # id of output alerts
     
    rules-mask  = ""    # Mask of rules tobe verified. This distributes rules on security threads.
                        # Format: rules-mask = (thread-index:rule-range)+
                        #            thread-index = a number starting from 0 to thread-nb. 0 to disisable
                        #            rule-range   = number,number-number
                        # Example:  "(0:1,2,4-6)(1:3)" means:
                        #        1. do not verify rules 1,2,4,5,6
                        #        2. thread 1 verifies only rule 3
                        #        3. thread 2 verifies the rest (in the case thread-nb = 2)
                        
    file-output  = 0    # Output security alerts to file. 1: enable, 0 : disable
                        # the security alerts are output to file only if this parameter and the global output.enable = 1
                        
    redis-output = 0    # Output security alerts to redis. 1: enable, 0 : disable
                        # the security alerts are output to redis only if this parameter and the global parameter redis-output.enable = 1
}
#CPU and memory usage monitor                   
cpu-mem-usage
{   enable = 0
    frequency = 5 
}
#indicates behaviour analysis
behaviour
{
    enable  = 0                  #Set to 1 to perform behaviour analysis, zero to disable it
    location = "reports/behaviour/" # location to store the output
}
# indicates ftp data reconstruction
reconstruct-ftp
{
    enable= 0 #Set to 1 to reconstruct ftp, 0 to disable it
    #Indicates the format of the output result. 
    id = 30
    location  = "reports/ftp/"
}

#socket configurations                  
socket
{   enable = 0 #set to 1 to enable, 0 to disable it
    domain = 1 # 0 For Unix domain 0 and 1 for Internet domain and 2 for both
    socket-descriptor = "/opt/mmt/probe/bin/" # Required for UNIX domain, folder location where socket descriptor is created, For Internet domain blank 
    port = {5000} #  Required for Internet domain, Port_nb, If one-socket-server = 0 then port field should port number = thread_nb 
                  # If 1 port field should have only one port number
    server-address = {"localhost"} # Required for Internet domain, IP address of ip_host 1, ip_host 2 ..
    one-socket-server = 0 # if 0 the server contains multiple sockets to receive reports, 1 only one socket to receive packets 
} 

#This report is for internet domain host1
security-report localhost{
    enable = 0 # set to 1 to enable reporting to host 1, 0 to disable
    event = {"null"} # if condition is assign to "null" (used to indicate non-http branch) and "http" to indicate http branch 
    rule-type = 2 # rule type 1 for simple rule, 2 for complex rules and 0 otherwise
    #Indicates the list of attributes that are reported when a event is triggered.
#    attributes = { "http.method","http.uri","http.user_agent","ip.mf_flag","ip.proto_id"}
    attributes = {"ip.dst","ip.src","tcp.dest_port","tcp.flags","arp.ar_op","arp.ar_sha","arp.ar_sip","ethernet.dst","ethernet.src","tcp.seq_nb","tcp.ack_nb","ip.mf_flag","ip.frag_offset","ip.tot_len","meta.packet_len","tcp.payload_len","tcp.src_port","ip.identification","tcp.urg","tcp.fin","tcp.psh" }

}

#This report is for security multisession reporting 
security-report-multisession remote{
    enable = 0
    #Indicates the list of attributes that are reported.
    attributes = { "nfs.file_name"}
}


#indicates the strategy for RADIUS reporting
radius-output
{
    enable = 0
    include-msg = 0                         #Indicates the message we want to report. 
                                            #   Set to n = 0 in order to report all messages (ANY).
                                            #   Set to n > 0 to indicate the message (1 = include-msg, 2 = include-condition)
    include-condition = 0                   #Indicates the condition to be met in order to report a msg.
                                            #   Set to n = 1 (IP-MSISDN) indicates report if IP to MSISDN mapping is present. 
                                            #   This is the only supported condition for this version. 
                                            #   Set to n = 0 (NONE) to skip the condition.
}

data-output
{

    include-user-agent = 32     # Indicates the threshold in terms of data volume for parsing the user agent in Web traffic.
                                # The value is in KiloBytes. If the value is zero it indicates to always parse the user agent.
                                # To disable the user agent parsing set the threshold to a negative value (-1)
}

#Specifies the criteria to consider a flow as micro flow
micro-flows 
{ 
    enable = 0                    # 1 for enable
    id = 8                        # Indicates the report_id of the output report
    include-packet-count = 20      # packets count threshold to include as micro flow
    include-byte-count   = 20     # data volume threshold in KB to include as micro flow
    report-packet-count  = 1000   # packets count threshold to report micro flows aggregated statistics
    report-byte-count    = 100     # data volume threshold in KB to report micro flows aggregated statistics
    report-flow-count    = 50     # flows count threshold to report micro flows aggregated statistics
}

# Specifies the session timeout time in seconds for different type of applications
session-timeout 
{ 
    default-session-timeout = 40 # 0 means default value that is 60 seconds. 
    long-session-timeout = 0    # 0 means default value that is 600 seconds .This is reasonable for Web and SSL connections especially when long polling is used.
                                #  Usually applications have a long polling period of about 3~5 minutes.
    short-session-timeout = 0   # 0 means default value that is 15 seconds.
    live-session-timeout  = 0   # 0 means default value that is 1500 seconds.For persistant connections like messaging applications and so on.  
}

# indicates event based reporting
event_report report1
{ 
    enable = 0
    #Indicates the format of the output result 
    id = 1000
    #Indicates the event 
    event = "arp.ar_sha"
    #Indicates the list of attributes that are reported when a event is triggered.
    attributes = {"arp.ar_hln", "arp.ar_pln"}   
}

# indicates condition based reporting and registering handlers from configuration file

condition_report report_web
{
     enable = 0     
    # Indicates the format of the output result. 
      id = 1
    # Indicates the event. 
     condition = "WEB"     
    # Indicates the list of attributes that are reported when a event is triggered.
     attributes = {"http.uri", "http.method", "http.response", "http.content_type", "http.host", "http.user_agent", "http.referer", "http.xcdn_seen", "http.content_len"}
     handlers = {"uri_handle", "http_method_handle", "http_response_handle", "mime_handle", "host_handle", "useragent_handle", "referer_handle", "xcdn_seen_handle", "content_len_handle"}   
}
condition_report report_ftp //under review
{
     enable = 0     
    # Indicates the format of the output result. 
     id = 4
    # Indicates the event. 
     condition = "FTP"     
    # Indicates the list of attributes that are reported when a event is triggered.
     attributes = {"ftp.data_direction", "ftp.p_payload", "ftp.packet_type", "ftp.packet_payload_len", "ftp.data_type", "ftp.file_name", "ftp.packet_request", "ftp.packet_request_parameter", "ftp.packet_response_code", "ftp.packet_reponse_value", "ftp.transfer_type", "ftp.ftp_session_mode", "ftp.data_direction", "ftp.file_last_modified", "ftp.session_connection_type", "ftp.user_name", "ftp.password", "ftp.last_command", "ftp.last_response_code", "ftp.file_size", "ftp.control_ip_session_id"}
     handlers = {"NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "ftp_response_value_handle", "NULL", "NULL", "NULL", "NULL", "ftp_session_connection_type_handle", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL"}   

}

condition_report report_ndn //under review
{
     enable = 0     
    #Indicates the format of the output result. 
     id = 625
    #Indicates the event. 
     condition = "NDN_HTTP"     
    #Indicates the list of attributes that are reported when a event is triggered.
     attributes = {"ndn.packet_type","ndn.list_sessions","ndn_http.packet_type","ndn_http.list_sessions","ip.src","ip.dst","ndn_http.packet_length","ndn.packet_length","ndn_http.nonce","ndn.nonce","ndn_http.life_time","ndn.life_time","ndn_http.fresh_period","ndn.fresh_period","tcp.src_port","udp.src_port","ipv6.src","ipv6.dst","ndn.name_components","ndn_http.name_components"}
     handlers ={"ndn_packet_report","NULL","ndn_packet_report","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL","NULL"}
}

condition_report report_rtp
{
     enable = 0     
    # Indicates the format of the output result. 
     id = 3
    # Indicates the event. 
     condition = "RTP"     
    # Indicates the list of attributes that are reported when a event is triggered.
     attributes = {"rtp.version", "rtp.jitter", "rtp.loss", "rtp.order_err", "rtp.burst_loss"}
     handlers = {"rtp_version_handle", "rtp_jitter_handle", "rtp_loss_handle", "rtp_order_error_handle", "rtp_burst_loss_handle"}   
}

condition_report reconstruct_http
{
     enable = 0  
    # Indicates the format of the output result. 
     id = 3
    # Indicates the event. 
     condition = "HTTP-RECONSTRUCT"     
     location = "/home/montimage/workspace/montimage/mmt-probe/files/"
    # Indicates the list of attributes that are reported when a event is triggered.
     attributes = {"tcp.payload_len", "tcp.p_payload", "http.msg_start", "http.header", "http.headers_end", "http.data", "http.msg_end", "http.method", "http.response","http.content_type","http.uri"}
     handlers = {"NULL", "NULL", "http_message_start_handle", "http_generic_header_handle","http_headers_end_handle","http_data_handle","http_message_end_handle","NULL","NULL","NULL","NULL","NULL"}   
}

condition_report report_ssl
{
     enable = 0   
    # Indicates the format of the output result. 
     id = 2
    # Indicates the event. 
     condition = "SSL"     
    # Indicates the list of attributes that are reported when a event is triggered.
     attributes = {"ssl.server_name"}
     handlers = {"ssl_server_name_handle"}   
}

cache-size-for-reporting = 300000  # this is the maximum number of reports queued before flushing to a file (cache_size)
                                   # 0 means MMT decides how many packets to queue (default =300000)
                                   
# if 1 enable the protocol statics
enable-proto-without-session-stat = 0
# if 1 enable the IP_fragmentation_report 
enable-IP-fragmentation-report = 0
# if 1 enable the IP_fragmentation_report 
enable-session-report = 1
# indicates the periodicity for reporting protocol statistics
stats-period = 5 #period in seconds
# indicates the periodicity for reporting output file period
file-output-period = 5 #sampled reporting
# indicates the number of report per msg for security report 
num-of-report-per-msg = 1 //reports per message in security reporting, default is 1
